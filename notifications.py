"""
Module qu·∫£n l√Ω th√¥ng b√°o: email v√† Telegram
"""
import os
import sys
import logging
from datetime import datetime, date, timedelta
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail, Email, To, Content
from telegram import Bot
from telegram.error import TelegramError
from models import Contract, ContractStatus, Employee, Department, User
from app import app, db

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ƒê·ªçc API keys t·ª´ m√¥i tr∆∞·ªùng
SENDGRID_API_KEY = os.environ.get('SENDGRID_API_KEY')
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID')

# Email m·∫∑c ƒë·ªãnh c·ªßa ng∆∞·ªùi g·ª≠i
DEFAULT_FROM_EMAIL = "no-reply@admin.com"

async def send_telegram_message(message):
    """
    G·ª≠i tin nh·∫Øn qua Telegram
    """
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        logger.warning("C√°c bi·∫øn m√¥i tr∆∞·ªùng TELEGRAM_BOT_TOKEN ho·∫∑c TELEGRAM_CHAT_ID kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh")
        return False
    
    try:
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message, parse_mode='HTML')
        logger.info(f"ƒê√£ g·ª≠i tin nh·∫Øn Telegram th√†nh c√¥ng")
        return True
    except TelegramError as e:
        logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn Telegram: {e}")
        return False

def send_email(to_email, subject, html_content=None, text_content=None):
    """
    G·ª≠i email qua SendGrid
    """
    if not SENDGRID_API_KEY:
        logger.warning("Bi·∫øn m√¥i tr∆∞·ªùng SENDGRID_API_KEY kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh")
        return False
    
    if not html_content and not text_content:
        logger.error("C·∫ßn cung c·∫•p n·ªôi dung email (HTML ho·∫∑c text)")
        return False
    
    try:
        sg = SendGridAPIClient(SENDGRID_API_KEY)
        
        message = Mail(
            from_email=Email(DEFAULT_FROM_EMAIL),
            to_emails=To(to_email),
            subject=subject
        )
        
        if html_content:
            message.content = Content("text/html", html_content)
        elif text_content:
            message.content = Content("text/plain", text_content)
        
        response = sg.send(message)
        logger.info(f"ƒê√£ g·ª≠i email th√†nh c√¥ng ƒë·∫øn {to_email}, m√£ tr·∫°ng th√°i: {response.status_code}")
        return True
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i email: {e}")
        return False

def check_expiring_contracts(days_threshold=30):
    """
    Ki·ªÉm tra v√† th√¥ng b√°o c√°c h·ª£p ƒë·ªìng s·∫Øp h·∫øt h·∫°n trong ng∆∞·ª°ng ng√†y ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
    """
    today = date.today()
    expiry_date = today + timedelta(days=days_threshold)
    
    # L·∫•y danh s√°ch h·ª£p ƒë·ªìng s·∫Øp h·∫øt h·∫°n
    expiring_contracts = Contract.query.filter(
        Contract.status == ContractStatus.ACTIVE.name,
        Contract.end_date.isnot(None),  # Ch·ªâ ki·ªÉm tra h·ª£p ƒë·ªìng c√≥ ng√†y k·∫øt th√∫c
        Contract.end_date <= expiry_date,  # S·∫Øp h·∫øt h·∫°n trong ng∆∞·ª°ng ng√†y
        Contract.end_date > today  # Ch∆∞a h·∫øt h·∫°n
    ).all()
    
    if not expiring_contracts:
        logger.info(f"Kh√¥ng c√≥ h·ª£p ƒë·ªìng n√†o s·∫Øp h·∫øt h·∫°n trong {days_threshold} ng√†y t·ªõi")
        return
    
    # T·∫°o th√¥ng b√°o cho t·ª´ng h·ª£p ƒë·ªìng
    for contract in expiring_contracts:
        days_remaining = (contract.end_date - today).days
        
        # L·∫•y th√¥ng tin nh√¢n vi√™n
        employee = contract.employee
        if not employee:
            logger.warning(f"Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n cho h·ª£p ƒë·ªìng {contract.contract_number}")
            continue
        
        # L·∫•y th√¥ng tin ng∆∞·ªùi qu·∫£n l√Ω
        managers = User.query.filter_by(role="admin").all()
        manager_emails = [manager.email for manager in managers]
        
        # T·∫°o n·ªôi dung email
        subject = f"C·∫¢NH B√ÅO: H·ª£p ƒë·ªìng c·ªßa {employee.full_name} s·∫Øp h·∫øt h·∫°n"
        html_content = f"""
        <h2>Th√¥ng b√°o h·ª£p ƒë·ªìng s·∫Øp h·∫øt h·∫°n</h2>
        <p>K√≠nh g·ª≠i Ban Qu·∫£n l√Ω,</p>
        <p>H·ªá th·ªëng ph√°t hi·ªán m·ªôt h·ª£p ƒë·ªìng s·∫Øp h·∫øt h·∫°n trong <strong>{days_remaining}</strong> ng√†y t·ªõi.</p>
        <h3>Chi ti·∫øt h·ª£p ƒë·ªìng:</h3>
        <ul>
            <li><strong>M√£ h·ª£p ƒë·ªìng:</strong> {contract.contract_number}</li>
            <li><strong>Nh√¢n vi√™n:</strong> {employee.full_name} (M√£: {employee.employee_code})</li>
            <li><strong>Ph√≤ng ban:</strong> {employee.department.name if employee.department else 'N/A'}</li>
            <li><strong>V·ªã tr√≠:</strong> {contract.job_title}</li>
            <li><strong>Ng√†y b·∫Øt ƒë·∫ßu:</strong> {contract.start_date.strftime('%d/%m/%Y')}</li>
            <li><strong>Ng√†y k·∫øt th√∫c:</strong> {contract.end_date.strftime('%d/%m/%Y')}</li>
        </ul>
        <p>Vui l√≤ng xem x√©t gia h·∫°n ho·∫∑c ch·∫•m d·ª©t h·ª£p ƒë·ªìng tr∆∞·ªõc ng√†y h·∫øt h·∫°n.</p>
        <p>Tr√¢n tr·ªçng,<br>H·ªá th·ªëng Qu·∫£n l√Ω Nh√¢n s·ª±</p>
        """
        
        # T·∫°o n·ªôi dung telegram
        telegram_message = f"""
<b>‚ö†Ô∏è C·∫¢NH B√ÅO: H·ª£p ƒë·ªìng s·∫Øp h·∫øt h·∫°n</b>

H·ª£p ƒë·ªìng c·ªßa <b>{employee.full_name}</b> s·∫Ω h·∫øt h·∫°n trong <b>{days_remaining}</b> ng√†y.

<b>Chi ti·∫øt:</b>
‚Ä¢ M√£ h·ª£p ƒë·ªìng: {contract.contract_number}
‚Ä¢ Nh√¢n vi√™n: {employee.full_name} (M√£: {employee.employee_code})
‚Ä¢ Ph√≤ng ban: {employee.department.name if employee.department else 'N/A'} 
‚Ä¢ V·ªã tr√≠: {contract.job_title}
‚Ä¢ Ng√†y k·∫øt th√∫c: {contract.end_date.strftime('%d/%m/%Y')}

Vui l√≤ng xem x√©t gia h·∫°n ho·∫∑c ch·∫•m d·ª©t h·ª£p ƒë·ªìng.
        """
        
        # G·ª≠i email ƒë·∫øn t·∫•t c·∫£ qu·∫£n l√Ω
        for email in manager_emails:
            send_email(email, subject, html_content=html_content)
        
        # G·ª≠i th√¥ng b√°o Telegram
        import asyncio
        asyncio.run(send_telegram_message(telegram_message))

def send_contract_notification(contract_id, notification_type):
    """
    G·ª≠i th√¥ng b√°o khi c√≥ s·ª± ki·ªán x·∫£y ra v·ªõi h·ª£p ƒë·ªìng
    
    notification_type c√≥ th·ªÉ l√†:
    - 'new': H·ª£p ƒë·ªìng m·ªõi ƒë∆∞·ª£c t·∫°o
    - 'updated': H·ª£p ƒë·ªìng ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    - 'terminated': H·ª£p ƒë·ªìng b·ªã ch·∫•m d·ª©t
    """
    contract = Contract.query.get(contract_id)
    if not contract:
        logger.error(f"Kh√¥ng t√¨m th·∫•y h·ª£p ƒë·ªìng v·ªõi ID {contract_id}")
        return False
    
    employee = contract.employee
    if not employee:
        logger.warning(f"Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n cho h·ª£p ƒë·ªìng {contract.contract_number}")
        return False
    
    # L·∫•y th√¥ng tin ng∆∞·ªùi qu·∫£n l√Ω
    managers = User.query.filter_by(role="admin").all()
    manager_emails = [manager.email for manager in managers]
    
    # X√°c ƒë·ªãnh th√¥ng tin th√¥ng b√°o d·ª±a tr√™n lo·∫°i
    if notification_type == 'new':
        subject = f"H·ª£p ƒë·ªìng m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o: {contract.contract_number}"
        action = "t·∫°o m·ªõi"
        icon = "üÜï"
    elif notification_type == 'updated':
        subject = f"H·ª£p ƒë·ªìng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: {contract.contract_number}"
        action = "c·∫≠p nh·∫≠t"
        icon = "üîÑ"
    elif notification_type == 'terminated':
        subject = f"H·ª£p ƒë·ªìng ƒë√£ b·ªã ch·∫•m d·ª©t: {contract.contract_number}"
        action = "ch·∫•m d·ª©t"
        icon = "‚ùå"
    else:
        logger.error(f"Lo·∫°i th√¥ng b√°o kh√¥ng h·ª£p l·ªá: {notification_type}")
        return False
    
    # T·∫°o n·ªôi dung email
    html_content = f"""
    <h2>Th√¥ng b√°o h·ª£p ƒë·ªìng</h2>
    <p>K√≠nh g·ª≠i Ban Qu·∫£n l√Ω,</p>
    <p>H·ª£p ƒë·ªìng sau ƒë√¢y ƒë√£ ƒë∆∞·ª£c {action}:</p>
    <h3>Chi ti·∫øt h·ª£p ƒë·ªìng:</h3>
    <ul>
        <li><strong>M√£ h·ª£p ƒë·ªìng:</strong> {contract.contract_number}</li>
        <li><strong>Nh√¢n vi√™n:</strong> {employee.full_name} (M√£: {employee.employee_code})</li>
        <li><strong>Ph√≤ng ban:</strong> {employee.department.name if employee.department else 'N/A'}</li>
        <li><strong>V·ªã tr√≠:</strong> {contract.job_title}</li>
        <li><strong>Ng√†y b·∫Øt ƒë·∫ßu:</strong> {contract.start_date.strftime('%d/%m/%Y')}</li>
        <li><strong>Ng√†y k·∫øt th√∫c:</strong> {contract.end_date.strftime('%d/%m/%Y') if contract.end_date else 'Kh√¥ng x√°c ƒë·ªãnh'}</li>
        <li><strong>Tr·∫°ng th√°i:</strong> {contract.status}</li>
    </ul>
    <p>Tr√¢n tr·ªçng,<br>H·ªá th·ªëng Qu·∫£n l√Ω Nh√¢n s·ª±</p>
    """
    
    # T·∫°o n·ªôi dung telegram
    telegram_message = f"""
<b>{icon} Th√¥ng b√°o: H·ª£p ƒë·ªìng ƒë√£ ƒë∆∞·ª£c {action}</b>

<b>Chi ti·∫øt:</b>
‚Ä¢ M√£ h·ª£p ƒë·ªìng: {contract.contract_number}
‚Ä¢ Nh√¢n vi√™n: {employee.full_name} (M√£: {employee.employee_code})
‚Ä¢ Ph√≤ng ban: {employee.department.name if employee.department else 'N/A'}
‚Ä¢ V·ªã tr√≠: {contract.job_title}
‚Ä¢ Ng√†y b·∫Øt ƒë·∫ßu: {contract.start_date.strftime('%d/%m/%Y')}
‚Ä¢ Ng√†y k·∫øt th√∫c: {contract.end_date.strftime('%d/%m/%Y') if contract.end_date else 'Kh√¥ng x√°c ƒë·ªãnh'}
‚Ä¢ Tr·∫°ng th√°i: {contract.status}
    """
    
    # G·ª≠i email ƒë·∫øn t·∫•t c·∫£ qu·∫£n l√Ω
    for email in manager_emails:
        send_email(email, subject, html_content=html_content)
    
    # G·ª≠i th√¥ng b√°o Telegram
    import asyncio
    asyncio.run(send_telegram_message(telegram_message))
    
    return True

# H√†m ki·ªÉm tra h·ª£p ƒë·ªìng s·∫Øp h·∫øt h·∫°n c√≥ th·ªÉ ƒë∆∞·ª£c g·ªçi t·ª´ l·ªãch tr√¨nh cron ho·∫∑c th·ªß c√¥ng
if __name__ == "__main__":
    with app.app_context():
        # N·∫øu ƒë∆∞·ª£c ch·∫°y t·ª´ d√≤ng l·ªánh, ki·ªÉm tra c√°c h·ª£p ƒë·ªìng s·∫Øp h·∫øt h·∫°n
        check_expiring_contracts()